{"version":3,"file":"angularfy-ng-autonumeric-src.js.map","sources":["ng://@angularfy/ng-autonumeric/src/autonumeric/basic-input.ts","ng://@angularfy/ng-autonumeric/src/autonumeric/autonumeric.component.ts","ng://@angularfy/ng-autonumeric/src/autonumeric/autonumeric.directive.ts","ng://@angularfy/ng-autonumeric/src/autonumeric/autonumeric.module.ts","ng://@angularfy/ng-autonumeric/src/autonumeric/autonumeric.service.ts"],"sourcesContent":["/**\r\n * @author Abdelghani AINOUSS\r\n * @description\r\n * Basic HTML attributes for numeric component\r\n */\r\nimport {Input} from \"@angular/core\"\r\n\r\n\r\nexport class BasicInput implements Partial<HTMLInputElement> {\r\n\r\n  @Input()\r\n  required: boolean;\r\n  @Input()\r\n  disabled: boolean;\r\n  @Input()\r\n  readonly: boolean;\r\n  @Input()\r\n  title: string;\r\n  @Input()\r\n  placeholder: string;\r\n}\r\n","/**\r\n * @author Abdelghani AINOUSS\r\n */\r\n\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  HostListener,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {NgAutonumericOptionsSelect} from './autonumeric-options-select';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport AutoNumeric from 'autonumeric';\r\nimport {BasicInput} from './basic-input';\r\n\r\n@Component({\r\n  selector: 'ng-autonumeric',\r\n  templateUrl: './autonumeric.component.html',\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => NgAutonumericComponent),\r\n    multi: true\r\n  }],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NgAutonumericComponent extends BasicInput implements OnInit, OnChanges, ControlValueAccessor, AfterViewInit, OnDestroy {\r\n\r\n  @Input()\r\n  ngModel: number | string;\r\n  @Input()\r\n  options: NgAutonumericOptionsSelect;\r\n  @Input()\r\n  type: string;\r\n  @ViewChild('input')\r\n  input: ElementRef;\r\n  instance: any;\r\n  unlistenFormatted: () => void;\r\n  internal: string;\r\n  @Output()\r\n  format = new EventEmitter();\r\n  _onChange = (_) => {\r\n  };\r\n  _onTouched = () => {\r\n  };\r\n\r\n  constructor(private cd: ChangeDetectorRef, private renderer: Renderer2) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    if (AutoNumeric === undefined) {\r\n      throw \"AutoNumeric is a peer dependency, please make sure you install it before using this library. Hint : npm install --save autonumeric@latest\";\r\n    }\r\n    this.instance = new AutoNumeric(this.input.nativeElement, this.options);\r\n    this.instance.set(this.ngModel);\r\n    this.unlistenFormatted = this.renderer.listen(this.input.nativeElement, 'autoNumeric:formatted', ($event) => {\r\n      this.onFormatted($event);\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!this.instance) {\r\n      return;\r\n    }\r\n    if (changes.ngModel) {\r\n      this.instance.set(this.ngModel);\r\n    }\r\n    if (changes.options) {\r\n      this.instance.update(this.options);\r\n    }\r\n  }\r\n\r\n  set(value) {\r\n    if (this.instance) {\r\n      this.instance.set(value);\r\n    } else throw 'NgAutonumeric instance not available. try using two binding by providing [(ngModel)]';\r\n  }\r\n\r\n  @HostListener('change', ['$event.target.value'])\r\n  handleChange(value) {\r\n    this.writeValue(value);\r\n    if (this.instance) {\r\n      value = this.instance.getNumber();\r\n    }\r\n    this._onChange(value);\r\n    this._onTouched();\r\n  }\r\n\r\n  onFormatted($event) {\r\n    this.format.emit($event);\r\n  }\r\n\r\n  @HostListener('blur')\r\n  handleTouched() {\r\n    this._onTouched();\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    if (this.instance) {\r\n      this.internal = this.instance.getFormatted();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if(this.unlistenFormatted)\r\n      this.unlistenFormatted();\r\n  }\r\n}\r\n","/**\r\n * @author Abdelghani AINOUSS\r\n */\r\n\r\nimport {\r\n    ChangeDetectorRef,\r\n    ElementRef,\r\n    EventEmitter,\r\n    forwardRef,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    Renderer2,\r\n    SimpleChanges,\r\n    ViewChild,\r\n    ViewEncapsulation,\r\n    Directive,\r\n    AfterViewInit,\r\n} from '@angular/core';\r\nimport { NgAutonumericOptionsSelect } from './autonumeric-options-select';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport AutoNumeric from 'autonumeric';\r\nimport { BasicInput } from './basic-input';\r\n\r\n\r\n/**\r\n * Allowed Tag\r\n *\r\n *\r\n```\r\n'input', 'b', 'caption', 'cite', 'code', 'const', 'dd', 'del', 'div', 'dfn', 'dt', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ins', 'kdb', 'label', 'li', 'option', 'output', 'p', 'q', 's', 'sample', 'span', 'strong', 'td', 'th', 'u'\r\n```\r\n *\r\n * ***\r\n * @example\r\n *\r\n```\r\n<input [ngAutonumeric]=\"{\r\n  digitGroupSeparator: ' ',\r\n  decimalCharacter: ',',\r\n  decimalCharacterAlternative: '.',\r\n  currencySymbol: '\\u00a0â¬',\r\n  currencySymbolPlacement: 's',\r\n  roundingMethod: 'U',\r\n  minimumValue: '0'\r\n}\" [(ngModel)]=\"myModel\" (format)=\"onFormat($event)\"(change)=\"onChange($event)\" placeholder=''/>\r\n\r\n```\r\n * Complete Example: https://stackblitz.com/edit/ng-autonumeric\r\n *\r\n * ***\r\n *\r\n * To generate selector\r\n *\r\n *\r\n```\r\nconst allowedTagList = [\r\n  'input', 'b', 'caption', 'cite', 'code', 'const', 'dd', 'del', 'div', 'dfn', 'dt', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ins', 'kdb', 'label', 'li', 'option', 'output', 'p', 'q', 's', 'sample', 'span', 'strong', 'td', 'th', 'u'\r\n]\r\nlet selector = allowedTagList.join('[ngAutonumeric], ') + '[ngAutonumeric]';\r\nconsole.log(selector);\r\n```\r\n *\r\n*/\r\n@Directive({\r\n    selector: 'input[ngAutonumeric], b[ngAutonumeric], caption[ngAutonumeric], cite[ngAutonumeric], code[ngAutonumeric], const[ngAutonumeric], dd[ngAutonumeric], del[ngAutonumeric], div[ngAutonumeric], dfn[ngAutonumeric], dt[ngAutonumeric], em[ngAutonumeric], h1[ngAutonumeric], h2[ngAutonumeric], h3[ngAutonumeric], h4[ngAutonumeric], h5[ngAutonumeric], h6[ngAutonumeric], ins[ngAutonumeric], kdb[ngAutonumeric], label[ngAutonumeric], li[ngAutonumeric], option[ngAutonumeric], output[ngAutonumeric], p[ngAutonumeric], q[ngAutonumeric], s[ngAutonumeric], sample[ngAutonumeric], span[ngAutonumeric], strong[ngAutonumeric], td[ngAutonumeric], th[ngAutonumeric], u[ngAutonumeric]',\r\n    exportAs: 'ngAutonumeric',\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: forwardRef(() => NgAutonumericDirective),\r\n        multi: true\r\n    }],\r\n})\r\nexport class NgAutonumericDirective extends BasicInput implements OnInit, OnChanges, ControlValueAccessor, AfterViewInit, OnDestroy {\r\n\r\n    @Input()\r\n    ngModel: number | string;\r\n    @Input()\r\n    ngAutonumeric: NgAutonumericOptionsSelect;\r\n    instance: any;\r\n    unlistenFormatted: () => void;\r\n    @Output()\r\n    format = new EventEmitter();\r\n    _onChange = (_) => {\r\n    };\r\n    _onTouched = () => {\r\n    };\r\n\r\n    constructor(private cd: ChangeDetectorRef, private renderer: Renderer2, private input: ElementRef) {\r\n        super();\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        if (AutoNumeric === undefined) {\r\n            throw \"AutoNumeric is a peer dependency, please make sure you install it before using this library. Hint : npm install --save autonumeric@latest\";\r\n        }\r\n        this.instance = new AutoNumeric(this.input.nativeElement, this.ngAutonumeric);\r\n        setTimeout(()=>{\r\n            this.instance.set(this.ngModel);\r\n        },0);\r\n        this.unlistenFormatted = this.renderer.listen(this.input.nativeElement, 'autoNumeric:formatted', ($event) => {\r\n            this.onFormatted($event);\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (!this.instance) {\r\n            return;\r\n        }\r\n        if (changes.ngModel) {\r\n            this.instance.set(this.ngModel);\r\n        }\r\n        if (changes.ngAutonumeric) {\r\n            this.instance.update(this.ngAutonumeric);\r\n        }\r\n    }\r\n\r\n    set(value) {\r\n        if (this.instance) {\r\n            this.instance.set(value);\r\n        } else throw 'NgAutonumeric instance not available. try using two binding by providing [(ngModel)]';\r\n    }\r\n\r\n    @HostListener('change', ['$event.target.value'])\r\n    handleChange(value) {\r\n        this.writeValue(value);\r\n        if (this.instance) {\r\n            value = this.instance.getNumber();\r\n        }\r\n        this._onChange(value);\r\n        this._onTouched();\r\n    }\r\n\r\n    onFormatted($event) {\r\n        let value = $event;\r\n        if (this.instance) {\r\n            value = this.instance.getFormatted()\r\n        }\r\n        this.format.emit(value);\r\n    }\r\n\r\n    @HostListener('blur')\r\n    handleTouched() {\r\n        this._onTouched();\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this._onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this._onTouched = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        this.ngModel = obj;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.unlistenFormatted)\r\n            this.unlistenFormatted();\r\n    }\r\n}\r\n","/**\r\n * @author Abdelghani AINOUSS\r\n */\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgAutonumericComponent } from './autonumeric.component';\r\nimport { NgAutonumericDirective } from './autonumeric.directive';\r\n\r\n@NgModule({\r\n  declarations: [NgAutonumericComponent, NgAutonumericDirective],\r\n  imports: [CommonModule, FormsModule],\r\n  exports: [NgAutonumericComponent, NgAutonumericDirective]\r\n})\r\nexport class NgAutonumericModule {\r\n}\r\n\r\n","/**\r\n * @author Abdelghani AINOUSS \r\n * \r\n */\r\n// TODO share logic between directive & component\r\n// TODO provide an injectable configuartion for the module\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n\r\n\r\n@Injectable()\r\nexport class NgAutonumericService {\r\n\r\n    constructor(){\r\n\r\n    }\r\n}"],"names":["tslib_1.__extends"],"mappings":"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"}
